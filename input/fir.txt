Implement a Finite Impulse Response (FIR) filter that processes one input sample at a time and produces one output sample.
The filter should maintain an internal shift register to store the most recent input samples.
Each time the function is called with a new input x, the shift register is updated, and a new output is computed as the sum of products between the shift register values and the filter coefficients.
The computed output must be written to the memory location pointed to by the output pointer y.

Assume the number of taps (coefficients) is N = 11, and coefficients is given in the function.

The function header is:

```cpp
void fir(int x, int *y) {
  int c[N] = {
    53, 0, −91, 0, 313, 500, 313, 0, −91, 0, 53
  };
```
